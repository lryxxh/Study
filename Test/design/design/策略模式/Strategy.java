/**
 * Strategy.java
 * Created by liurenyong at 2013-12-18
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.策略模式;

/**
 * <定义>定义一系列的算法，把它们一个个封装起来，并且使他们可相互替换。本模式使得算法可独立于使用它的客户而变化。
 * <本质>分离算法，选择实现
 * <优点>
 * 1.定义一系列算法：定义一系列算法，实现让这些算法可以相互替换。
 * 2.避免多重条件语句
 * 3.更好的扩展性
 * 5.Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
 * 6.简化了单元测试，因为每一个算法都有自己的类，可以通过自己的藉口单独测试。
 * <缺点>
 * 1.客户必须了解每种策略的不同
 * 2.增加对象数目
 * 3.只适合扁平的算法结构：策略模式的一系列算法地位是平等的，是可以相互替换的，事实上构成了一个扁平的算法结构，也就是在一个策略接口下，有多个平等的策略算法，就相当于兄弟算法。
 * <使用场景>
 * 1.出现有许多相关的类，仅仅是行为有差别的情况下，可以使用策略模式来使用多个行为中的一个来配置一个类的方法，实现算法动态切换。
 * 2.出现同一个算法，有很多不同实现的情况下，可以使用策略模式来把这些“不同实现”实现成一个算法的类层次。
 * 3.需要封装算法中，有与算法相关数据的情况下，可以使用策略模式来避免暴露这些跟算法相关的数据结构。
 * 4.出现抽象一个定义了很多行为得类，并且是通过多个if-else语句来选择这些行为的情况下，可以使用策略模式来代替这些条件语句。
 * @author liurenyong 2013-12-18
 */
public abstract class Strategy {

    public abstract void algorithmInterface();
}
