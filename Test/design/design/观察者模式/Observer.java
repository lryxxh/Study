/**
 * Observer.java
 * Created by liurenyong at 2013-12-20
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.观察者模式;

/**
 * <定义>也叫发布-订阅模式：定义对象间的一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，庙会通知所有观察者对象，使他们能够自动更新自己。
 * <本质>触发联动。
 * <分类> 
 * 1.推模型：将要更新的内容发送给观察者，观察者不知道目标对象的其他信息
 * 2.拉模型：将目标对象传递给观察者，观察者自己从目标对象中获取想要的更新
 * <优点>
 * 1.实现了观察者和目标之间的抽象耦合：目标只知道观察者接口，并不知道具体的观察者的类，从而实现目标类和具体的观察者类之间的解耦。
 * 2.观察者模式实现了动态联动：所谓联动，就是做一个操作会引起其他相关的操作。
 * 3.观察者模式支持广播通信：由于目标发送通知给观察者是面向所有注册的观察者，所以每次目标通知的信息就要对所有注册的观察者进行广播。
 * <缺点>
 * 1.可能会引起无谓的操作：由于观察者模式每次都是广播通信，不管观察者需要不需要，每个观察者都会被调用uodate方法，如果观察者不需要执行相应处理，那么这次操作就浪费了。
 * <使用场景>
 * 1.当一个抽象模型有两个方面，其中一个方面的操作依赖于另一个方面的状态变化，那么就可以选用观察者模式。
 * 2.如果在更改一个对象的时候，需要同时连带改变其他的对象，而且不知道究竟应该有多少对象需要被连带改变。
 * 3.当一个对象必须通知其他的对象，但是你又希望这个对象和其他被它通知的对象时松散耦合的。
 *
 * @author liurenyong 2013-12-20
 */
public interface Observer {
    
    /**
     * 拉模型. 
     * @param obj
     */
    public void update(Subject obj);
    
    /** 
     * 推模型，观察者只能被动接收更新的信息。
     * @param content
     */
    public void update(String content);

}
