/**
 * Prototype.java
 * Created by liurenyong at 2013-12-19
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.原型模式;

/**
 * <定义>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
 * <本质>克隆生成对象。
 * <优点>
 * 1.对客户端隐藏具体的实现类型：原型模式的客户端只知道原型接口的类型，并不知道具体的实现类型，从而减少客户端对这些具体实现类型的依赖。
 * 2.在运行时动态改变具体的实现类型：原型模式可以在运行期间，由客户来注册符合原型接口的实现类型，也可以动态地改变具体的实现类型，看起来接口没有任何变化，但实际上已经是另外一个类实例了。
 * <缺点>
 * 1.原型模式最大的缺点就在于每个原型的子类都必须实现clone的操作，尤其在包含引用类型的对象时，clone方法会比较麻烦，必须要能够递归地让所有的相关对象都要正确地实现克隆。
 * <使用场景>
 * 1.如果一个系统想要独立于他想要使用的对象时，可以使用原型模式，让系统只面向接口编程，在系统需要新对象的时候，可以通过克隆原型来得到。
 * 2.如果需要实例化的类是在运行时刻动态指定时，可以使用原型模式，通过克隆原型来得到需要的实例。
 *
 * @author liurenyong 2013-12-19
 */
public interface Prototype {

    public Prototype clone();
}
