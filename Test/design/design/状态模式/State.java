/**
 * State.java
 * Created by liurenyong at 2013-12-20
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.状态模式;

/**
 * <定义>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。（状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化）
 * <本质>根据状态来分离和选择行为。
 * <优点>
 * 1.简化应用逻辑控制：状态模式使用单独的类来封装一个状态的处理。
 * 2.更好地分离状态和行为:状态模式通过设置所有状态类的公共接口，把状态和状态对应的行为分离开，把所有与一个特定的状态相关的行为都放入一个对象中，使得应用程序在控制的时候，只需要关心状态的切换，而不用关心这个状态对应的真正处理。
 * 3.更好的扩展型：引用状态处理的公共接口后，使得扩展新的状态变得飞创容易，只需要新增加一个实现状态处理的公共接口的实现类，然后在进行状态维护的地方，设置状态变化到这个新的状态即可。
 * 4.显式话进行状态转化：状态模式为不同的状态引入独立的对象，使得状态的转换变得更加明确。而且状态对象可以保证上下文不会发生内部状态不一致的情况，因为上下文中只有一个变量来记录状态对象，只要为这一个变量赋值就可以了。
 * 5.将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。
 * <缺点>
 * 1.一个状态对应一个处理类，会使得程序引入太多的状态类，使得程序变得复杂。
 * <使用场景>
 * 1.如果一个对象的行为取决于它的状态，而且它必须在运行时刻根据状态来改变它的行为，可以使用状态模式，把状态和行为分离开。
 * 2.如果一个操作中含有庞大的多分支语句，而且这些分支依赖于该对象的状态，可以使用状态模式，把各个分支的处理分散包装到单独的对象处理中，这样，这些分支对应的对象就可以不依赖于其他对象而独立变化了。
 * @author liurenyong 2013-12-20
 */
public interface State {
    
    public void handle(String type);

}
