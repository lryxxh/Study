/**
 * Memento.java
 * Created by liurenyong at 2013-12-20
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.备忘录模式;

/**
 * <定义>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。
 * <本质>保存和恢复内部状态。保存是手段，恢复才是目的。
 * <优点>
 * 1.更好的封装性：备忘录模式通过使用备忘录对象，来封装原发器对象的内部状态，虽然这个对象是保存在原发器对象的外部，但是由于备忘录对象的窄接口并不提供任何方法。
 * 2.简化了原发器：备忘录模式中，备忘录对象被保存到原发器对象之外，让客户来管理他们请求的状态，从而让原发器对象得到简化。
 * 3.窄接口和宽接口：备忘录模式，通过引入窄接口和宽接口，使得不同的地方，对备忘录对象的访问时不一样的。窄接口保证了只有原发器才可以访问备忘录对象的状态。
 * <缺点>
 * 1.导致高开销。
 * <使用场景>
 * 1.如果必须保存一个对象在某一个时刻的全部或者部门状态，方便在以后需要的时候，可以把该对象恢复到先前的状态，可以使用备忘录模式。
 * 2.如果需要保存一个对象的内部状态，但是如果用接口来让其他对象直接得到这些需要保存的状态，将会暴露对象的实现细节并破坏对象的封装性，这时可以使用备忘录模式，把备忘录对象实现成为原发器对象的内部类，而且还是私有的，从而保证只有原发器对象才能访问该备忘录对象。
 * 3.如果想使用一些已经存在的子类，但是不可能对每一个子类都进行适配，这种情况可以选中对象适配器，直接适配这些子类的父类就可以啦。
 * @author liurenyong 2013-12-20
 */
public interface Memento {
//备忘录的窄接口，
}
