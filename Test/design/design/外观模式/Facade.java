/**
 * Facade.java
 * Created by liurenyong at 2013-12-19
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.外观模式;

/**
 * <定义>为了系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 * <本质>封装交互，简化调用：封装了子系统外部和内部多个模块的交互过程，从而简化了外部的调用，通过外观，子系统为外部提供了一些高层接口，方便使用。外观模式很好的体现了最少知识原则。
 * <优点>
 * 1.松散耦合：外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。
 * 2.简单易用：外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现， 也不需要跟众多子系统内部的模块进行交互，只需要跟外观交互就可以了，相当于外观雷为外部客户端使用子系统提供了一站式服务。
 * 3.更好地划分访问的层次：通过合理的使用Facade，可以帮助我们更好的划分访问的层次，有些方法使对系统外的，有些方法是系统内部使用的，把需要暴漏给外部的功能集中到外观中，这样既方便客户端使用，也很好地隐藏了内部的细节。
 * <缺点>
 * 1.过多或者不合理的Facade让人迷惑，不知道是否直接调用Facade好还是直接调用模块好。
 * <使用场景>
 * 1.如果希望复杂的子系统提供一个简单接口时，使用外观模式。
 * 2.如果让客户程序和抽象类的实现部分松散耦合，可以使用外观模式。使用外观对象将这个子系统和它的客户分离，提供系统的独立性和可移植性。
 * 3.如果构建多层结构的系统，可以考虑使用外观模式，使用外观对象作为每层的入口，这样可以简化层间调用，也可以松散层次之间的依赖关系。
 * @author liurenyong 2013-12-19
 */
public class Facade {
    
    
    /** 
     * 示意方法，供客户端调用，封装交互，简化调用。
     */
    public void test() {
        ModelA modelA = new ModelA();
        ModelB modelB = new ModelB();
        ModelC modelC = new ModelC();
        modelA.testa();
        modelB.testb();
        modelC.testc();
    }

}
