/**
 * Principle.java
 * Created by liurenyong at 2013-12-18
 * @Copyright (c) 2013 China National Petroleum Corporation All Rights Reserved.
 */
package design.设计原则;

/**
 *
 * @author liurenyong 2013-12-18
 */
public class Principle {
    //1.单一职责原则：就一个类而言，应该仅有一个引起它变化的原因。如果一个雷承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。
    //2.开放-封闭原则：是说软件实体（类，模块，函数等等）应该可以扩展，但是不可以修改。（对于扩展时开放的，对于更改是封闭的）
    //3.依赖倒置原则：抽象不应该依赖细节，细节应该依赖于抽象（针对接口编程，不要对实现编程）。A:高层模块不应该依赖于低层模块，两个都应该依赖抽象。 B：抽象不应该依赖细节，细节应该依赖抽象。
    //4.里氏代换原则（LSP）：子类型必须能够替换掉他们的父类型
    //5.最少知识原则（迪米特法则（LoD））：如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
    //合成/聚合复用原则(CARP):尽量使用合成(组合)/聚合,尽量不要使用继承.
}
