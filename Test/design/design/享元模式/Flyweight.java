package design.享元模式;

/**
 * <定义>运用共享技术有效地支持大量细粒度的对象。
 * <本质>分离与共享：分离的是对象状态中变与不变的部分，共享的是对象中不变的部分。
 * <优点>
 * 1.减少对象数量，节省内存空间
 * <缺点>
 * 1.维护共享对象，需要额外开销
 * <使用场景>
 * 1.如果一个应用程序使用了大量的细粒度对象，可以使用享元模式来减少对象数量。
 * 2.如果由于使用大量的对象，造成很大的存储开销，可以使用享元模式来减少对象数量，并节约内存。
 * 3.如果对象的大多数状态都可以转变为外部状态，比如通过计算得到，或是从外部传入等，可以使用享元模式来实现内部状态和外部状态的分离。
 * 4.如果不考虑对象的外部状态，可以用相对较少的共享对象取代很多组合对象，可以使用享元模式来共享对象，然后组合对象来使用这些共享对象。
 * @author liurenyong
 *
 */
public interface Flyweight {
	
	public void operation(String extrinsicState);

}
