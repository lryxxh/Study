package design.解释器模式;


/**
 * <定义>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
 * <本质>分离与共享：分离的是对象状态中变与不变的部分，共享的是对象中不变的部分。
 * <优点>
 * 1.减少对象数量，节省内存空间
 * <缺点>
 * 1.解释器模式为文法中的每一条规则至少定义了一个类，因此包含许多规则的文法可能难以管理和为主。建议当文法非常复杂时，使用其他的技术如语法分析程序或编辑器生成器来处理。
 * <使用场景>
 * 1.当有一个语言需要解释执行，并且你可将该语言中的句子表示为一个抽象云发树时，可以使用解释器模式。
 * 2.如果由于使用大量的对象，造成很大的存储开销，可以使用享元模式来减少对象数量，并节约内存。
 * 3.如果对象的大多数状态都可以转变为外部状态，比如通过计算得到，或是从外部传入等，可以使用享元模式来实现内部状态和外部状态的分离。
 * 4.如果不考虑对象的外部状态，可以用相对较少的共享对象取代很多组合对象，可以使用享元模式来共享对象，然后组合对象来使用这些共享对象。
 * @author liurenyong
 *
 */
public class Interpreter {

}
